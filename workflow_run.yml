# Call the workflow template via tower-cli
- hosts: localhost
  become: no
  vars: 
    ocp_cluster_name: "{{ ocp_cluster_name }}"
    hosted_zone_domain_name: "{{ hosted_zone_domain_name }}"
    install_metrics: "{{ install_metrics }}"
    install_logging: "{{ install_logging }}"
    install_idm: "{{ install_idm }}"
    multi_tenant: "{{ multi_tenant }}"
    region: "{{ region }}"
    keypair: "{{ keypair }}"
    keypair_pub: "{{ keypair_pub }}"
    security_group_name: "{{ security_group_name }}"
    create_vpc: "{{ create_vpc }}"
    vpc_name: "{{ vpc_name }}"
    vpc_cidr_block: "{{ vpc_cidr_block }}"
    vpc_subnet_cidr: "{{ vpc_subnet_cidr }}"
    bastion_instance_count: "{{ bastion_instance_count }}"
    node_instance_count: "{{ node_instance_count }}"
    infranode_instance_count: "{{ infranode_instance_count }}"
    master_instance_count: "{{ master_instance_count }}"
    delete_volumes_on_termination: "{{ delete_volumes_on_termination }}"
    ansibletower_host: "tower.example.com"
    ansibletower_user: "admin"
    ansibletower_password: "secret"
  tasks:
  - name: Execute OCP on AWS Workflow
    shell: tower-cli config host {{ ansibletower_host }} ; tower-cli config username {{ ansibletower_user }} ; tower-cli config password {{ ansibletower_password }} ; tower-cli workflow_job launch -W "ocp-deploy" -e "install_idm={{ install_idm }} ocp_cluster_name={{ ocp_cluster_name }} install_metrics={{ install_metrics }} install_logging={{ install_logging }} install_idm={{ install_idm }} multi_tenant={{ multi_tenant }} region={{ region }} keypair={{ keypair }} keypair_pub={{ keypair_pub }} security_group_name={{ security_group_name }} create_vpc={{ create_vpc }} vpc_name={{ vpc_name }} vpc_cidr_block={{ vpc_cidr_block }} vpc_subnet_cidr={{ vpc_subnet_cidr }} delete_volumes_on_termination={{ delete_volumes_on_termination }}" --monitor --wait --timeout 86400

